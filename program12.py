# -*- coding: utf-8 -*-
"""Program12

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cIdGkcQoJMc3Yfi0GKWoIObB2Lic-zOS
"""

# a)exploratory data analysis
import pandas as pd

df=pd.read_csv('/content/Wine_Quality.csv')
print(df.head())
print(df.isnull().sum())
print(df.describe())
print(df['quality'].value_counts())

# b)Visualization
import matplotlib.pyplot as plt
import seaborn as sns

# (i)Scatter plot
plt.figure(figsize=(8,6))
sns.scatterplot(x='alcohol',y='pH',hue='quality',data=df)
plt.title("Scatter plot of Alcohol vs pH")
plt.show()

# (ii)Histogram
plt.figure(figsize=(8,6))
df['alcohol'].hist(bins=30)
plt.title("Histogram of Alcohol")
plt.xlabel("Alcohol")
plt.ylabel("Frequency")
plt.show()

# (iii)Box plot
plt.figure(figsize=(8,6))
sns.boxplot(x='quality',y='alcohol',data=df)
plt.title("Box plot of Acohol grouped by Quality")
plt.show()

# c)Implementing k-NN Classification
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

df_cleaned=df.dropna()
X=df_cleaned.drop(['quality','type'],axis=1)
y=df_cleaned['quality']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
scaler=StandardScaler()
X_train_scaled=scaler.fit_transform(X_train)
X_test_scaled=scaler.transform(X_test)

k_values=[1,3,5,7,9,11,13,15]
for k in k_values:
  knn=KNeighborsClassifier(n_neighbors=k)
  knn.fit(X_train_scaled,y_train)
  y_pred=knn.predict(X_test_scaled)
  accuracy=accuracy_score(y_test,y_pred)
  print(f"Accuracy with k={k}:{accuracy:.4f}")

k_values_input=input("Enter k values:")
k_values=[int (k.strip()) for k in k_values_input.split('.')]
for k in k_values:
  knn=KNeighborsClassifier(n_neighbors=k)
  knn.fit(X_train_scaled,y_train)
  y_pred=knn.predict(X_test_scaled)
  accuracy=accuracy_score(y_test,y_pred)
  print(f"Accuracy with k={k}: {accuracy:.4f}")

accuracy=accuracy_score(y_test,y_pred)*100
print(f"\nAccuracy: {accuracy:.2f}%")

